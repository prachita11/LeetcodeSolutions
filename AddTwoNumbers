/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    ListNode sumList=null;
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        int node1 = getCount(l1);
        int node2 = getCount(l2);
        ListNode temp1;
        ListNode temp2;        
        int sum;
        int carry =0;
        if(node1<node2)
        {
            temp1=l2;
            temp2=l1;
        }
        else{
            temp1=l1;
            temp2=l2;
        }
        
        
        while(temp1!=null)
        {
           if(temp2==null)
           {
            sum = temp1.val+carry;
            carry = sum/10;
            sum = sum % 10;
            ListNode node = new ListNode(sum);            
            InsertNode(node);            
            temp1=temp1.next;
           }
            else
            {
            sum = temp1.val+temp2.val+carry;
            carry = sum/10;
            sum = sum % 10;
            ListNode node = new ListNode(sum);            
            InsertNode(node);            
            temp1=temp1.next;
            temp2=temp2.next;
            }
        }
      if(carry>0)
      {
           ListNode node = new ListNode(carry);            
            InsertNode(node); 
      }
        return sumList;
    }
    
    public void InsertNode(ListNode node)
    {
        ListNode temp = node;
        if (sumList==null)
        {
            sumList = temp;
            sumList.next=null;
        }
        else{
            ListNode counter = sumList;
            
            while(counter.next!=null)
            {
                counter=counter.next;
            }
            counter.next=node;
            node.next=null;
        }
    }
    
    
    
     public int getCount(ListNode temp) 
    { 
        int count = 0; 
        while (temp != null) 
        { 
            count++; 
            temp = temp.next; 
        } 
        return count; 
    } 
}
